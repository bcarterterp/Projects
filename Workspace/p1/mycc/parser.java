
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 07 22:06:00 EST 2014
//----------------------------------------------------

package mycc;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 07 22:06:00 EST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\003\004\000\002\010" +
    "\004\000\002\010\002\000\002\007\005\000\002\007\007" +
    "\000\002\017\003\000\002\017\003\000\002\013\003\000" +
    "\002\013\005\000\002\013\003\000\002\022\003\000\002" +
    "\022\006\000\002\012\004\000\002\012\003\000\002\011" +
    "\007\000\002\023\004\000\002\024\004\000\002\024\002" +
    "\000\002\006\006\000\002\005\004\000\002\005\002\000" +
    "\002\004\006\000\002\004\005\000\002\004\004\000\002" +
    "\004\007\000\002\004\011\000\002\004\007\000\002\004" +
    "\004\000\002\004\003\000\002\016\003\000\002\016\006" +
    "\000\002\021\006\000\002\020\003\000\002\020\002\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\003\000\002\015" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\011\ufffe\012\ufffe\001\002\000\006\011" +
    "\014\012\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufff3\011\ufff3\012\ufff3\001" +
    "\002\000\006\003\152\040\153\001\002\000\004\024\147" +
    "\001\002\000\006\003\ufffa\040\ufffa\001\002\000\010\002" +
    "\000\011\014\012\012\001\002\000\006\003\ufffb\040\ufffb" +
    "\001\002\000\022\003\uffff\011\uffff\012\uffff\014\uffff\016" +
    "\uffff\017\uffff\031\uffff\040\uffff\001\002\000\010\002\ufff4" +
    "\011\ufff4\012\ufff4\001\002\000\004\040\146\001\002\000" +
    "\004\024\021\001\002\000\010\011\014\012\012\025\uffef" +
    "\001\002\000\004\040\141\001\002\000\004\025\024\001" +
    "\002\000\004\030\025\001\002\000\022\003\ufffe\011\ufffe" +
    "\012\ufffe\014\ufffe\016\ufffe\017\ufffe\031\ufffe\040\ufffe\001" +
    "\002\000\010\002\ufff2\011\ufff2\012\ufff2\001\002\000\022" +
    "\003\uffec\011\014\012\012\014\uffec\016\uffec\017\uffec\031" +
    "\uffec\040\uffec\001\002\000\004\024\135\001\002\000\016" +
    "\003\040\014\036\016\033\017\042\031\032\040\041\001" +
    "\002\000\026\002\uffee\003\uffee\011\uffee\012\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\031\uffee\040\uffee\001\002\000" +
    "\004\024\131\001\002\000\016\003\uffed\014\uffed\016\uffed" +
    "\017\uffed\031\uffed\040\uffed\001\002\000\004\036\126\001" +
    "\002\000\004\024\115\001\002\000\004\032\114\001\002" +
    "\000\016\003\uffe4\014\uffe4\016\uffe4\017\uffe4\031\uffe4\040" +
    "\uffe4\001\002\000\042\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\105\025\uffe3\026" +
    "\106\027\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002" +
    "\000\022\003\053\013\045\021\043\024\054\032\050\037" +
    "\044\040\041\041\051\001\002\000\020\003\053\013\045" +
    "\021\043\024\054\037\044\040\041\041\051\001\002\000" +
    "\034\004\uffde\005\uffde\006\uffde\007\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\025\uffde\027\uffde\032\uffde\034\uffde\035" +
    "\uffde\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\027\uffdc\032" +
    "\uffdc\034\uffdc\035\uffdc\001\002\000\034\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\025" +
    "\uffd5\027\uffd5\032\uffd5\034\uffd5\035\uffd5\001\002\000\030" +
    "\004\061\005\067\006\070\007\057\020\060\021\056\022" +
    "\062\023\066\032\103\034\063\035\064\001\002\000\016" +
    "\003\uffe9\014\uffe9\016\uffe9\017\uffe9\031\uffe9\040\uffe9\001" +
    "\002\000\034\004\uffdd\005\uffdd\006\uffdd\007\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\025\uffdd\027\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\001\002\000\034\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\027" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\001\002\000\034\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\025\uffcd\027\uffcd\032\uffcd\034\uffcd\035\uffcd\001\002" +
    "\000\020\003\053\013\045\021\043\024\054\037\044\040" +
    "\041\041\051\001\002\000\030\004\061\005\067\006\070" +
    "\007\057\020\060\021\056\022\062\023\066\025\065\034" +
    "\063\035\064\001\002\000\020\003\053\013\045\021\043" +
    "\024\054\037\044\040\041\041\051\001\002\000\020\003" +
    "\053\013\045\021\043\024\054\037\044\040\041\041\051" +
    "\001\002\000\020\003\053\013\045\021\043\024\054\037" +
    "\044\040\041\041\051\001\002\000\020\003\053\013\045" +
    "\021\043\024\054\037\044\040\041\041\051\001\002\000" +
    "\020\003\053\013\045\021\043\024\054\037\044\040\041" +
    "\041\051\001\002\000\020\003\053\013\045\021\043\024" +
    "\054\037\044\040\041\041\051\001\002\000\020\003\053" +
    "\013\045\021\043\024\054\037\044\040\041\041\051\001" +
    "\002\000\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\025\uffd7\027\uffd7\032\uffd7\034" +
    "\uffd7\035\uffd7\001\002\000\020\003\053\013\045\021\043" +
    "\024\054\037\044\040\041\041\051\001\002\000\020\003" +
    "\053\013\045\021\043\024\054\037\044\040\041\041\051" +
    "\001\002\000\020\003\053\013\045\021\043\024\054\037" +
    "\044\040\041\041\051\001\002\000\034\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\020\uffce\021\uffce\022\uffce\023\uffce\025" +
    "\uffce\027\uffce\032\uffce\034\uffce\035\uffce\001\002\000\034" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\025\uffd2\027\uffd2\032\uffd2\034\uffd2\035\uffd2" +
    "\001\002\000\034\004\uffd8\005\uffd8\006\uffd8\007\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\027\uffd8\032\uffd8" +
    "\034\uffd8\035\uffd8\001\002\000\034\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1" +
    "\027\uffd1\032\uffd1\034\uffd1\035\uffd1\001\002\000\034\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\025\uffd0\027\uffd0\032\uffd0\034\uffd0\035\uffd0\001" +
    "\002\000\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\025\uffd9\027\uffd9\032\uffd9\034" +
    "\uffd9\035\uffd9\001\002\000\034\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\027" +
    "\uffd3\032\uffd3\034\uffd3\035\uffd3\001\002\000\034\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\025\uffdb\027\uffdb\032\uffdb\034\uffdb\035\uffdb\001\002" +
    "\000\034\004\uffcf\005\uffcf\006\uffcf\007\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\001\002\000\034\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\025\uffda\027\uffda" +
    "\032\uffda\034\uffda\035\uffda\001\002\000\016\003\uffea\014" +
    "\uffea\016\uffea\017\uffea\031\uffea\040\uffea\001\002\000\034" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\025\uffd6\027\uffd6\032\uffd6\034\uffd6\035\uffd6" +
    "\001\002\000\022\003\053\013\045\021\043\024\054\025" +
    "\uffdf\037\044\040\041\041\051\001\002\000\020\003\053" +
    "\013\045\021\043\024\054\037\044\040\041\041\051\001" +
    "\002\000\030\004\061\005\067\006\070\007\057\020\060" +
    "\021\056\022\062\023\066\027\110\034\063\035\064\001" +
    "\002\000\036\004\uffe2\005\uffe2\006\uffe2\007\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2\032\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\001\002\000\004\025\113\001\002" +
    "\000\030\004\061\005\067\006\070\007\057\020\060\021" +
    "\056\022\062\023\066\025\uffe0\034\063\035\064\001\002" +
    "\000\034\004\uffe1\005\uffe1\006\uffe1\007\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\027\uffe1\032\uffe1\034\uffe1" +
    "\035\uffe1\001\002\000\016\003\uffe5\014\uffe5\016\uffe5\017" +
    "\uffe5\031\uffe5\040\uffe5\001\002\000\022\003\053\010\117" +
    "\013\045\021\043\024\054\037\044\040\041\041\051\001" +
    "\002\000\030\004\061\005\067\006\070\007\057\020\060" +
    "\021\056\022\062\023\066\025\uffcc\034\063\035\064\001" +
    "\002\000\020\003\053\013\045\021\043\024\054\037\044" +
    "\040\041\041\051\001\002\000\004\025\121\001\002\000" +
    "\004\030\025\001\002\000\020\003\uffe8\014\uffe8\015\123" +
    "\016\uffe8\017\uffe8\031\uffe8\040\uffe8\001\002\000\004\030" +
    "\025\001\002\000\016\003\uffe7\014\uffe7\016\uffe7\017\uffe7" +
    "\031\uffe7\040\uffe7\001\002\000\030\004\061\005\067\006" +
    "\070\007\057\020\060\021\056\022\062\023\066\025\uffcb" +
    "\034\063\035\064\001\002\000\020\003\053\013\045\021" +
    "\043\024\054\037\044\040\041\041\051\001\002\000\030" +
    "\004\061\005\067\006\070\007\057\020\060\021\056\022" +
    "\062\023\066\032\130\034\063\035\064\001\002\000\016" +
    "\003\uffeb\014\uffeb\016\uffeb\017\uffeb\031\uffeb\040\uffeb\001" +
    "\002\000\022\003\053\010\117\013\045\021\043\024\054" +
    "\037\044\040\041\041\051\001\002\000\004\025\133\001" +
    "\002\000\004\030\025\001\002\000\016\003\uffe6\014\uffe6" +
    "\016\uffe6\017\uffe6\031\uffe6\040\uffe6\001\002\000\010\011" +
    "\014\012\012\025\uffef\001\002\000\004\025\137\001\002" +
    "\000\004\032\140\001\002\000\022\003\ufffc\011\ufffc\012" +
    "\ufffc\014\ufffc\016\ufffc\017\ufffc\031\ufffc\040\ufffc\001\002" +
    "\000\012\025\ufff6\026\143\032\ufff6\033\ufff6\001\002\000" +
    "\004\025\ufff0\001\002\000\020\003\053\013\045\021\043" +
    "\024\054\037\044\040\041\041\051\001\002\000\030\004" +
    "\061\005\067\006\070\007\057\020\060\021\056\022\062" +
    "\023\066\027\145\034\063\035\064\001\002\000\010\025" +
    "\ufff5\032\ufff5\033\ufff5\001\002\000\004\024\ufff1\001\002" +
    "\000\010\011\014\012\012\025\uffef\001\002\000\004\025" +
    "\151\001\002\000\006\030\025\032\140\001\002\000\006" +
    "\032\ufff7\033\ufff7\001\002\000\012\024\ufff1\026\143\032" +
    "\ufff6\033\ufff6\001\002\000\006\032\ufff9\033\ufff9\001\002" +
    "\000\006\032\157\033\156\001\002\000\004\040\141\001" +
    "\002\000\022\003\ufffd\011\ufffd\012\ufffd\014\ufffd\016\ufffd" +
    "\017\ufffd\031\ufffd\040\ufffd\001\002\000\006\032\ufff8\033" +
    "\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\003\004\010\003\001\001\000\014\007" +
    "\014\011\006\012\012\017\007\023\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\154\022\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\015\017\016\023\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\021\024\022\001\001\000" +
    "\004\022\141\001\001\000\002\001\001\000\004\006\025" +
    "\001\001\000\004\010\026\001\001\000\002\001\001\000" +
    "\012\005\030\007\014\017\007\023\027\001\001\000\002" +
    "\001\001\000\010\004\033\016\034\021\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\046\016\045\021\051" +
    "\001\001\000\010\014\103\016\045\021\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\054\016\045\021\051" +
    "\001\001\000\002\001\001\000\010\014\101\016\045\021" +
    "\051\001\001\000\010\014\100\016\045\021\051\001\001" +
    "\000\010\014\077\016\045\021\051\001\001\000\010\014" +
    "\076\016\045\021\051\001\001\000\010\014\075\016\045" +
    "\021\051\001\001\000\010\014\074\016\045\021\051\001" +
    "\001\000\010\014\073\016\045\021\051\001\001\000\002" +
    "\001\001\000\010\014\072\016\045\021\051\001\001\000" +
    "\010\014\071\016\045\021\051\001\001\000\010\014\070" +
    "\016\045\021\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\111\016\045\020\110\021\051\001" +
    "\001\000\010\014\106\016\045\021\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\115" +
    "\015\117\016\045\021\051\001\001\000\002\001\001\000" +
    "\010\014\124\016\045\021\051\001\001\000\002\001\001" +
    "\000\004\006\121\001\001\000\002\001\001\000\004\006" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\126\016\045\021\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\115\015\131\016\045\021\051" +
    "\001\001\000\002\001\001\000\004\006\133\001\001\000" +
    "\002\001\001\000\006\017\021\024\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\143\016\045\021\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\021\024\147\001\001\000\002\001\001" +
    "\000\004\006\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\157" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// one symbol table for global scope
	// each function has its own symbol table
	// each block statement has its own symbol table
	
	public static symTab globalSymTab; 	// global symbol table  
	public static symTab currSymTab;   	// current symbol table
        public static boolean optFlag;          // optimization flag

	/********* use later in code generation ********
        public static astNodeList code;         // list of proc ASTs    
        public static ClassFile class_file;
	***********************************************/

	// keep track of current type specification
	public static int curType;              // store current var type 

	// output error message with current line number
	public static void msg(String s) {
		System.out.println("ERROR("+(Yylex.pos()+1)+") "+s);
	}

	public static void main(String args[]) throws Exception {

                globalSymTab = new symTab();   // init global symbol table
                currSymTab = globalSymTab;     // global symtab is current

                // get name of input file
                String fname = null;
                String oFlag = null;

                if (args.length == 1)
                {
                        fname = args[0];
                        optFlag = false;               // optimization off
                }
                else if (args.length == 2) {
                        fname = args[1];
                        oFlag = args[0];
                        optFlag = true;                // optimization on
                }

                if ((fname == null) ||
                   !fname.endsWith(".c") ||
                   ((args.length == 2) && !oFlag.equals("-O"))) {
                        System.out.println("usage: java mycc.parser [-O] <file>.c");
                        System.exit(-1);
                }

                String cname = fname.substring(0, fname.length()-2);
                FileReader fp = new FileReader(fname);

                addPrintFunctions();
                new parser(new Yylex(fp)).parse();           // parse input

                /********* use later in code generation ********
                code.print();                                // print AST
                ClassFile class_file = new ClassFile(cname); // prepare codegen
                ClassFile.generate_code(code, globalSymTab); // generate code
                ***********************************************/
        }

        // add print functions in the global symbol table
        private static void addPrintFunctions()
        {
                symTabEntry param;
                symTabEntry func1;

                /* printStr(string) */
                param = new symTabEntry("DUMMY", sym.STRING_LITERAL);
                func1 = new symTabEntry("printStr", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printInt (int) */
                param = new symTabEntry("DUMMY", sym.INT);
                func1 = new symTabEntry("printInt", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printLn () */
                func1 = new symTabEntry("printLn", sym.VOID);
                func1.setFunc();
                globalSymTab.addSym(func1);
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boolExp ::= NOT_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*boolExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // boolExp ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*boolExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= error 
            {
              expNode RESULT = null;
		 
		parser.msg("illegal expression");
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp AND_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp OR_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp LESS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp GR exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp NE_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp EQ_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= funcCall 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= lhsVal 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= MINUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= LPAREN exp RPAREN 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MUL exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp DIV exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MINUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp PLUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= BOOL 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= STRING_LITERAL 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= CONSTANT 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // optArg ::= 
            {
              expNode RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optArg ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcCall ::= IDENTIFIER LPAREN optArg RPAREN 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*funcCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lhsVal ::= IDENTIFIER LBRACKET exp RBRACKET 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*lhsVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lhsVal ::= IDENTIFIER 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*lhsVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= error 
            {
              Object RESULT = null;
		 
		parser.msg("illegal statement");
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= funcCall SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= WHILE LPAREN boolExp RPAREN blockStmt 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= IF LPAREN boolExp RPAREN blockStmt ELSE blockStmt 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= IF LPAREN boolExp RPAREN blockStmt 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= RETURN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= RETURN exp SEMI 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= lhsVal ASSIGN exp SEMI 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtList ::= stmtList stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // blockStmt ::= LCURL declarationList stmtList RCURL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*blockStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optParam ::= 
            {
              symTabEntry RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optParam ::= typeSpec ident 
            {
              symTabEntry RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcID ::= typeSpec IDENTIFIER 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*funcID*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcDef ::= funcID LPAREN optParam RPAREN blockStmt 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		symTabEntry p = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*funcDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcDefList ::= funcDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*funcDefList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcDefList ::= funcDefList funcDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*funcDefList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident ::= IDENTIFIER LBRACKET exp RBRACKET 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ident ::= IDENTIFIER 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identList ::= error 
            {
              Object RESULT = null;
		 
		parser.msg("illegal variable declaration");
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identList ::= identList COMMA ident 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identList ::= ident 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typeSpec ::= VOID 
            {
              expNode RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*typeSpec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeSpec ::= INT 
            {
              expNode RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*typeSpec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= funcID LPAREN optParam RPAREN SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= typeSpec identList SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationList ::= declarationList declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= declarationList funcDefList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*translation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

