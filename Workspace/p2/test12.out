1: //------ test relational & logical expression errors  -------
2: 
3: void
4: main() {
5:   int x,y,z;
6: 
7:   // test control flow
ERROR(8) requires boolean
8:   if (x - 1)        // requires boolean
9:     { z = 1; }
10:   else
11:     { z = 2; }
12: 
13:   while (x < 6) 
14:     { x = x + 1; }
15: 
16:   // test relational & logical expressions
17: 
ERROR(18) requires boolean
18:   if ( (x == y) && (1 * z) )  // requires boolean
19:     { z = 5; }
20: 
ERROR(21) requires boolean
21:   if ( (x == y) == 1 )  // requires boolean
22:     { z = 5; }
23: 
ERROR(24) requires integer
24:   if ( 1 != (x < 4) )  // requires integer
25:     { z = 5; }
26: 
27:   if ( !(x != z) ) 
ERROR(28) requires integer
28:     { y = y > x; }    // requires integer
29: }
30: 
** Global Variables **
main, void, function, param = <void>
printInt, void, function, param = int
printLn, void, function, param = <void>
printStr, void, function, param = String
** Local Variables in main() **
{
x, int
y, int
z, int
{
}
{
}
{
}
{
}
{
}
{
}
{
}
}
TREE_PROC: main
{
  TREE_IF: CONDITION: (x MINUS 1)
{
    TREE_INSTR: z = 1
}
  ELSE: 
{
    TREE_INSTR: z = 2
}
  END_IF 
  TREE_WHILE: CONDITION: (x LESS 6)
{
    TREE_INSTR: x = (x PLUS 1)
}
  END_WHILE 
  TREE_IF: CONDITION: ((x EQ_OP y) AND_OP (1 MUL z))
{
    TREE_INSTR: z = 5
}
  END_IF 
  TREE_IF: CONDITION: ((x EQ_OP y) EQ_OP 1)
{
    TREE_INSTR: z = 5
}
  END_IF 
  TREE_IF: CONDITION: (1 NE_OP (x LESS 4))
{
    TREE_INSTR: z = 5
}
  END_IF 
  TREE_IF: CONDITION: ( NOT_OP (x NE_OP z))
{
    TREE_INSTR: y = (y GR x)
}
  END_IF 
}
END_PROC

