
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Apr 22 03:28:15 EDT 2011
//----------------------------------------------------

package mycc;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Apr 22 03:28:15 EDT 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\003\004\000\002\005" +
    "\004\000\002\005\002\000\002\004\005\000\002\007\003" +
    "\000\002\006\003\000\002\015\003\000\002\021\003\000" +
    "\002\024\004\000\002\016\007\000\002\017\004\000\002" +
    "\017\002\000\002\025\002\000\002\023\007\000\002\020" +
    "\004\000\002\020\002\000\002\022\006\000\002\022\007" +
    "\000\002\022\004\000\002\012\003\000\002\014\006\000" +
    "\002\013\003\000\002\013\002\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\011\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\011\ufffe\001\002\000\004\011\014\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufff9\001\002\000\004\040\061\001\002\000" +
    "\004\030\015\001\002\000\004\002\000\001\002\000\012" +
    "\011\uffff\014\uffff\031\uffff\040\uffff\001\002\000\004\040" +
    "\ufffc\001\002\000\012\011\ufff4\014\ufff4\031\ufff4\040\ufff4" +
    "\001\002\000\004\002\ufff8\001\002\000\012\011\ufffe\014" +
    "\ufffe\031\ufffe\040\ufffe\001\002\000\012\011\014\014\ufff1" +
    "\031\ufff1\040\ufff1\001\002\000\004\040\061\001\002\000" +
    "\010\014\027\031\024\040\025\001\002\000\004\036\056" +
    "\001\002\000\012\002\ufff3\014\ufff3\031\ufff3\040\ufff3\001" +
    "\002\000\016\004\uffed\020\uffed\024\052\025\uffed\032\uffed" +
    "\036\uffed\001\002\000\010\014\ufff2\031\ufff2\040\ufff2\001" +
    "\002\000\004\024\032\001\002\000\004\032\031\001\002" +
    "\000\010\014\uffee\031\uffee\040\uffee\001\002\000\012\024" +
    "\035\037\034\040\025\041\036\001\002\000\012\004\uffe4" +
    "\020\uffe4\025\uffe4\032\uffe4\001\002\000\012\004\uffe9\020" +
    "\uffe9\025\uffe9\032\uffe9\001\002\000\012\024\035\037\034" +
    "\040\025\041\036\001\002\000\012\004\uffe8\020\uffe8\025" +
    "\uffe8\032\uffe8\001\002\000\010\004\044\020\045\025\uffe2" +
    "\001\002\000\004\025\042\001\002\000\012\004\uffe3\020" +
    "\uffe3\025\uffe3\032\uffe3\001\002\000\004\030\015\001\002" +
    "\000\010\014\uffef\031\uffef\040\uffef\001\002\000\012\024" +
    "\035\037\034\040\025\041\036\001\002\000\012\024\035" +
    "\037\034\040\025\041\036\001\002\000\012\004\uffe6\020" +
    "\uffe6\025\uffe6\032\uffe6\001\002\000\012\004\uffe5\020\uffe5" +
    "\025\uffe5\032\uffe5\001\002\000\010\004\044\020\045\025" +
    "\051\001\002\000\012\004\uffe7\020\uffe7\025\uffe7\032\uffe7" +
    "\001\002\000\014\024\035\025\uffea\037\034\040\025\041" +
    "\036\001\002\000\004\025\055\001\002\000\010\004\044" +
    "\020\045\025\uffeb\001\002\000\012\004\uffec\020\uffec\025" +
    "\uffec\032\uffec\001\002\000\012\024\035\037\034\040\025" +
    "\041\036\001\002\000\010\004\044\020\045\032\060\001" +
    "\002\000\010\014\ufff0\031\ufff0\040\ufff0\001\002\000\010" +
    "\024\ufffa\025\ufffa\032\ufffa\001\002\000\004\032\ufffb\001" +
    "\002\000\004\032\064\001\002\000\012\011\ufffd\014\ufffd" +
    "\031\ufffd\040\ufffd\001\002\000\006\024\066\032\ufffb\001" +
    "\002\000\006\011\014\025\ufff5\001\002\000\004\040\061" +
    "\001\002\000\004\025\071\001\002\000\004\030\ufff7\001" +
    "\002\000\004\025\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\006\003\004\005\003\001\001\000\014\004" +
    "\012\007\007\016\010\021\011\024\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\062\015\064\001\001\000\004\023\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\016\001\001\000\002\001\001\000\004\005\017\001\001" +
    "\000\010\004\012\007\020\020\021\001\001\000\006\006" +
    "\062\015\061\001\001\000\010\012\022\014\027\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\036\011\037\012\032\014" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\047\012\032\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\042\001\001\000\002\001\001\000\010\010\046\012" +
    "\032\014\040\001\001\000\010\010\045\012\032\014\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\053\012\032\013\052" +
    "\014\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\056\012\032\014\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\066\017\067\001\001\000\004\015" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// one symbol table for global scope
	// each function has its own symbol table
	// each block statement has its own symbol table
	
	public static symTab globalSymTab; 	// global symbol table  
	public static symTab currSymTab;   	// current symbol table
        public static boolean optFlag;          // optimization flag
        public static astNodeList code;         // list of proc ASTs    

        public static ClassFile class_file;

	// keep track of current type specification
	public static int curType;              // store current var type 

	// output error message with current line number
	public static void msg(String s) {
		System.out.println("ERROR("+(Yylex.pos()+1)+") "+s);
	}

	public static void main(String args[]) throws Exception {

		globalSymTab = new symTab();   // init global symbol table
		currSymTab = globalSymTab;     // global symtab is current 

                // get name of input file
                String fname = null;
                String oFlag = null;

                if (args.length == 1)
                {
                        fname = args[0];
                        optFlag = false;               // optimization off
                }
                else if (args.length == 2) {
                        fname = args[1];
                        oFlag = args[0];
                        optFlag = true;                // optimization on
                }

                if ((fname == null) ||
                   !fname.endsWith(".c") ||
                   ((args.length == 2) && !oFlag.equals("-O"))) {
                        System.out.println("usage: java mycc.parser [-O] <file>.c");
                        System.exit(-1);
                }

                String cname = fname.substring(0, fname.length()-2);
                FileReader fp = new FileReader(fname);

                addPrintFunctions();
                new parser(new Yylex(fp)).parse();           // parse input
                code.print();                                // print AST

                ClassFile class_file = new ClassFile(cname); // prepare codegen
                ClassFile.genCode(code, globalSymTab, true); 	// generate code

	}

        // add print functions in the global symbol table
        private static void addPrintFunctions()
        {
                symTabEntry param;
                symTabEntry func1;

                /* printStr(string) */
                param = new symTabEntry("DUMMY", sym.STRING_LITERAL);
                func1 = new symTabEntry("printStr", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printInt (int) */
                param = new symTabEntry("DUMMY", sym.INT);
                func1 = new symTabEntry("printInt", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printLn () */
                func1 = new symTabEntry("printLn", sym.VOID);
                func1.setFunc();
                globalSymTab.addSym(func1);
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boolExp ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if (e1.type() != sym.BOOL) {
			parser.msg("requires boolean");
		}
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= funcCall 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= lhsVal 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp EQ_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = new expNode(sym.BOOL,sym.EQ_OP,e1,e2);
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp PLUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = new expNode(sym.INT,sym.PLUS,e1,e2);
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LPAREN exp RPAREN 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= STRING_LITERAL 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = new expNode(e1); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= CONSTANT 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = new expNode(e1); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // optArg ::= 
            {
              expNode RESULT = null;
		 
		RESULT = null;
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // optArg ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcCall ::= IDENTIFIER LPAREN optArg RPAREN 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		symTabEntry s = parser.globalSymTab.getSym(id);
		expNode e1 = new expNode(sym.VOID, s);

		if (id.equals("printInt")) { 
			// special case
			if ((e2 == null) || !e2.isINT()) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1, e2);
		}
		else if (id.equals("printStr")) { 
			// special case
			if ((e2 == null) || !e2.isSTR()) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1, e2);
		}
		else if (id.equals("printLn")) {
			// special case
			if (e2 != null) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1);
		}
		else {
			// add code to generate function call AST here
			RESULT = null;
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*funcCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lhsVal ::= IDENTIFIER 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		symTabEntry s;
		s = parser.currSymTab.getSym(id);
		if (s == null) {
			parser.msg("undeclared variable "+id);
			RESULT = null;
		}
		else {
			RESULT = new expNode(s.getType(), s); 
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*lhsVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= funcCall SEMI 
            {
              astNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode f = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new astNode();
		RESULT.genInstr(f);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= IF LPAREN boolExp RPAREN blockStmt 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode b = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNode();
		RESULT.genIf(e1, b);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= lhsVal ASSIGN exp SEMI 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new astNode();
		RESULT.genInstr(new expNode(sym.VOID, sym.ASSIGN, e1, e2));
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmtList ::= 
            {
              astNodeList RESULT = null;
		
		RESULT = new astNodeList();
	
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtList ::= stmtList stmt 
            {
              astNodeList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode s = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		l.add(s);
		RESULT = l;
	
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // blockStmt ::= LCURL NT$0 declarationList stmtList RCURL 
            {
              astNode RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (astNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                // return to old symbol table
		RESULT = new astNode();
		RESULT.genBlk(l);
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*blockStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT = null;
 
                // set up new symbol table
	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optParam ::= 
            {
              symTabEntry RESULT = null;
		 
		RESULT = null;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optParam ::= typeSpec ident 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = id;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcID ::= typeSpec ident LPAREN optParam RPAREN 
            {
              symTabEntry RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		symTabEntry s = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symTabEntry p = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        s.setFunc();
                        s.setSymTab(parser.globalSymTab);
                        parser.globalSymTab.addSym(s);
                        RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*funcID*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcDef ::= funcID blockStmt 
            {
              astNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode f = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = new astNode();
		RESULT.genProc(new expNode(id.getType(), id), f);
	
              CUP$parser$result = new java_cup.runtime.Symbol(18/*funcDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcDefList ::= funcDef 
            {
              astNodeList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode s = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNodeList();
		RESULT.add(s);
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*funcDefList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident ::= IDENTIFIER 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		symTabEntry s = new symTabEntry(id, parser.curType);
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identList ::= ident 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		parser.currSymTab.addSym(id);
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typeSpec ::= INT 
            {
              Object RESULT = null;
		 
		parser.curType = sym.INT; 
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*typeSpec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= typeSpec identList SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationList ::= declarationList declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= declarationList funcDefList 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		parser.globalSymTab.list();
		parser.code = l;
	
              CUP$parser$result = new java_cup.runtime.Symbol(1/*translation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

