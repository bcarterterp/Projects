1: //------ test functions & return type errors -------
2: 
3: int y;
4: 
5: int f1(int x)       
ERROR(6) return mismatch
6:   { x = 1; return ; }		// return mismatch
7: 
8: void f2(int y) 
ERROR(9) return mismatch
9:   { y = 2; return 5; }		// return mismatch
10: 
11: void f3() 
12:   { y = 3; return ; }
13: 
14: void f4() {
15:   int x,y,z;
16: 
17:   y = 0;
18:   f1(x);
19:   x = f1(y);
ERROR(20) parameter mismatch
20:   f2();				// parameter mismatch
21:   x = f3();			// requires integer
ERROR(22) requires integer
22: }
23: 
24: void f4()  			// redeclaration of f4
ERROR(25) redeclaration of f4
25:   { y = 3; return ; }
26: 
** Global Variables **
f1, int, function, param = int
f2, void, function, param = int
f3, void, function, param = <void>
f4, void, function, param = <void>
printInt, void, function, param = int
printLn, void, function, param = <void>
printStr, void, function, param = String
y, int
** Local Variables in f1() **
x, int
{
}
** Local Variables in f2() **
y, int
{
}
** Local Variables in f3() **
{
}
** Local Variables in f4() **
{
x, int
y, int
z, int
}
TREE_PROC: f1
{
    TREE_INSTR: x = 1
    TREE_INSTR:  RETURN 
}
END_PROC

TREE_PROC: f2
{
    TREE_INSTR: y = 2
    TREE_INSTR:  RETURN 5
}
END_PROC

TREE_PROC: f3
{
    TREE_INSTR: y = 3
    TREE_INSTR:  RETURN 
}
END_PROC

TREE_PROC: f4
{
    TREE_INSTR: y = 0
    TREE_INSTR: CALL f1(x)
    TREE_INSTR: x = CALL f1(y)

    TREE_INSTR: CALL f2()
    TREE_INSTR: x = CALL f3()

}
END_PROC

TREE_PROC: f4
{
    TREE_INSTR: y = 3
    TREE_INSTR:  RETURN 
}
END_PROC

