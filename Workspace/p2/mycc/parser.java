
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Apr 02 17:30:46 EDT 2014
//----------------------------------------------------

package mycc;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed Apr 02 17:30:46 EDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\004\000\002\005" +
    "\004\000\002\005\002\000\002\004\005\000\002\007\003" +
    "\000\002\007\003\000\002\006\003\000\002\006\005\000" +
    "\002\015\003\000\002\015\006\000\002\021\004\000\002" +
    "\021\003\000\002\024\004\000\002\024\004\000\002\016" +
    "\007\000\002\017\004\000\002\017\002\000\002\025\002" +
    "\000\002\023\007\000\002\020\004\000\002\020\002\000" +
    "\002\022\006\000\002\022\005\000\002\022\004\000\002" +
    "\022\007\000\002\022\011\000\002\022\007\000\002\022" +
    "\004\000\002\012\003\000\002\012\006\000\002\014\006" +
    "\000\002\013\003\000\002\013\002\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\011\ufffe\012\ufffe\001\002\000\006\011" +
    "\014\012\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufff5\011\ufff5\012\ufff5\001" +
    "\002\000\004\040\020\001\002\000\006\030\101\032\102" +
    "\001\002\000\004\040\ufffb\001\002\000\010\002\000\011" +
    "\014\012\012\001\002\000\004\040\ufffc\001\002\000\020" +
    "\011\uffff\012\uffff\014\uffff\016\uffff\017\uffff\031\uffff\040" +
    "\uffff\001\002\000\010\002\ufff6\011\ufff6\012\ufff6\001\002" +
    "\000\004\040\020\001\002\000\014\024\ufff8\025\ufff8\026" +
    "\027\032\ufff8\033\ufff8\001\002\000\004\024\022\001\002" +
    "\000\010\011\014\012\012\025\ufff0\001\002\000\004\040" +
    "\020\001\002\000\004\025\025\001\002\000\006\030\ufff2" +
    "\032\ufff2\001\002\000\004\025\ufff1\001\002\000\016\010" +
    "\037\021\030\024\040\037\031\040\036\041\034\001\002" +
    "\000\016\010\037\021\030\024\040\037\031\040\036\041" +
    "\034\001\002\000\034\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\027\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\001\002\000\034\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025" +
    "\uffd0\027\uffd0\032\uffd0\034\uffd0\035\uffd0\001\002\000\030" +
    "\004\045\005\053\006\054\007\043\020\044\021\042\022" +
    "\046\023\052\027\077\034\047\035\050\001\002\000\034" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\025\uffde\027\uffde\032\uffde\034\uffde\035\uffde" +
    "\001\002\000\034\004\uffcf\005\uffcf\006\uffcf\007\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\032\uffcf" +
    "\034\uffcf\035\uffcf\001\002\000\042\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\070" +
    "\025\uffe4\026\071\027\uffe4\032\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\001\002\000\016\010\037\021\030\024\040\037\031" +
    "\040\036\041\034\001\002\000\016\010\037\021\030\024" +
    "\040\037\031\040\036\041\034\001\002\000\030\004\045" +
    "\005\053\006\054\007\043\020\044\021\042\022\046\023" +
    "\052\025\051\034\047\035\050\001\002\000\016\010\037" +
    "\021\030\024\040\037\031\040\036\041\034\001\002\000" +
    "\016\010\037\021\030\024\040\037\031\040\036\041\034" +
    "\001\002\000\016\010\037\021\030\024\040\037\031\040" +
    "\036\041\034\001\002\000\016\010\037\021\030\024\040" +
    "\037\031\040\036\041\034\001\002\000\016\010\037\021" +
    "\030\024\040\037\031\040\036\041\034\001\002\000\016" +
    "\010\037\021\030\024\040\037\031\040\036\041\034\001" +
    "\002\000\016\010\037\021\030\024\040\037\031\040\036" +
    "\041\034\001\002\000\034\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd\027\uffdd" +
    "\032\uffdd\034\uffdd\035\uffdd\001\002\000\016\010\037\021" +
    "\030\024\040\037\031\040\036\041\034\001\002\000\016" +
    "\010\037\021\030\024\040\037\031\040\036\041\034\001" +
    "\002\000\016\010\037\021\030\024\040\037\031\040\036" +
    "\041\034\001\002\000\034\004\045\005\053\006\uffd2\007" +
    "\uffd2\020\044\021\042\022\046\023\052\025\uffd2\027\uffd2" +
    "\032\uffd2\034\047\035\050\001\002\000\034\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\020\044\021\042\022\046\023\052" +
    "\025\uffd6\027\uffd6\032\uffd6\034\uffd6\035\uffd6\001\002\000" +
    "\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\025\uffd9\027\uffd9\032\uffd9\034\uffd9\035" +
    "\uffd9\001\002\000\034\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\020\044\021\042\022\046\023\052\025\uffd5\027\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\001\002\000\034\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\020\044\021\042\022\046\023\052\025" +
    "\uffd4\027\uffd4\032\uffd4\034\uffd4\035\uffd4\001\002\000\034" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\025\uffda\027\uffda\032\uffda\034\uffda\035\uffda" +
    "\001\002\000\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7\020" +
    "\044\021\042\022\046\023\052\025\uffd7\027\uffd7\032\uffd7" +
    "\034\uffd7\035\uffd7\001\002\000\034\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\020\uffdc\021\uffdc\022\046\023\052\025\uffdc" +
    "\027\uffdc\032\uffdc\034\uffdc\035\uffdc\001\002\000\034\004" +
    "\045\005\053\006\uffd3\007\uffd3\020\044\021\042\022\046" +
    "\023\052\025\uffd3\027\uffd3\032\uffd3\034\047\035\050\001" +
    "\002\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\020\uffdb" +
    "\021\uffdb\022\046\023\052\025\uffdb\027\uffdb\032\uffdb\034" +
    "\uffdb\035\uffdb\001\002\000\034\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\025\uffd1\027" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\001\002\000\020\010\037" +
    "\021\030\024\040\025\uffe0\037\031\040\036\041\034\001" +
    "\002\000\016\010\037\021\030\024\040\037\031\040\036" +
    "\041\034\001\002\000\030\004\045\005\053\006\054\007" +
    "\043\020\044\021\042\022\046\023\052\027\073\034\047" +
    "\035\050\001\002\000\036\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\027\uffe3" +
    "\032\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\004\025" +
    "\076\001\002\000\030\004\045\005\053\006\054\007\043" +
    "\020\044\021\042\022\046\023\052\025\uffe1\034\047\035" +
    "\050\001\002\000\034\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2\032" +
    "\uffe2\034\uffe2\035\uffe2\001\002\000\012\024\ufff7\025\ufff7" +
    "\032\ufff7\033\ufff7\001\002\000\034\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\020\uffd8\021\uffd8\022\046\023\052\025\uffd8" +
    "\027\uffd8\032\uffd8\034\uffd8\035\uffd8\001\002\000\020\011" +
    "\uffef\012\uffef\014\uffef\016\uffef\017\uffef\031\uffef\040\uffef" +
    "\001\002\000\010\002\ufff3\011\ufff3\012\ufff3\001\002\000" +
    "\010\002\ufff4\011\ufff4\012\ufff4\001\002\000\020\011\ufffe" +
    "\012\ufffe\014\ufffe\016\ufffe\017\ufffe\031\ufffe\040\ufffe\001" +
    "\002\000\020\011\014\012\012\014\uffec\016\uffec\017\uffec" +
    "\031\uffec\040\uffec\001\002\000\004\040\020\001\002\000" +
    "\014\014\115\016\114\017\111\031\112\040\036\001\002" +
    "\000\004\036\136\001\002\000\020\010\037\021\030\024" +
    "\040\032\134\037\031\040\036\041\034\001\002\000\024" +
    "\002\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\031\uffee\040\uffee\001\002\000\014\014\uffed\016\uffed" +
    "\017\uffed\031\uffed\040\uffed\001\002\000\004\024\127\001" +
    "\002\000\004\024\120\001\002\000\004\032\117\001\002" +
    "\000\014\014\uffe5\016\uffe5\017\uffe5\031\uffe5\040\uffe5\001" +
    "\002\000\016\010\037\021\030\024\040\037\031\040\036" +
    "\041\034\001\002\000\030\004\045\005\053\006\054\007" +
    "\043\020\044\021\042\022\046\023\052\025\uffce\034\047" +
    "\035\050\001\002\000\004\025\123\001\002\000\004\030" +
    "\101\001\002\000\016\014\uffe8\015\125\016\uffe8\017\uffe8" +
    "\031\uffe8\040\uffe8\001\002\000\004\030\101\001\002\000" +
    "\014\014\uffe7\016\uffe7\017\uffe7\031\uffe7\040\uffe7\001\002" +
    "\000\016\010\037\021\030\024\040\037\031\040\036\041" +
    "\034\001\002\000\004\025\131\001\002\000\004\030\101" +
    "\001\002\000\014\014\uffe6\016\uffe6\017\uffe6\031\uffe6\040" +
    "\uffe6\001\002\000\030\004\045\005\053\006\054\007\043" +
    "\020\044\021\042\022\046\023\052\032\135\034\047\035" +
    "\050\001\002\000\014\014\uffe9\016\uffe9\017\uffe9\031\uffe9" +
    "\040\uffe9\001\002\000\014\014\uffea\016\uffea\017\uffea\031" +
    "\uffea\040\uffea\001\002\000\016\010\037\021\030\024\040" +
    "\037\031\040\036\041\034\001\002\000\030\004\045\005" +
    "\053\006\054\007\043\020\044\021\042\022\046\023\052" +
    "\032\140\034\047\035\050\001\002\000\014\014\uffeb\016" +
    "\uffeb\017\uffeb\031\uffeb\040\uffeb\001\002\000\006\032\ufffa" +
    "\033\ufffa\001\002\000\006\032\144\033\143\001\002\000" +
    "\004\040\020\001\002\000\020\011\ufffd\012\ufffd\014\ufffd" +
    "\016\ufffd\017\ufffd\031\ufffd\040\ufffd\001\002\000\006\032" +
    "\ufff9\033\ufff9\001\002\000\010\024\022\032\ufffa\033\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\003\004\005\003\001\001\000\014\004" +
    "\014\007\007\016\010\021\012\024\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\141\015\145\001\001\000\004\023\102\001\001\000\002" +
    "\001\001\000\010\007\016\016\010\024\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\022\017\023\001\001\000\004\015\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\032\012\031\014\034\001\001\000\010\010\077" +
    "\012\031\014\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\066\012\031\014\034\001" +
    "\001\000\010\010\040\012\031\014\034\001\001\000\002" +
    "\001\001\000\010\010\065\012\031\014\034\001\001\000" +
    "\010\010\064\012\031\014\034\001\001\000\010\010\063" +
    "\012\031\014\034\001\001\000\010\010\062\012\031\014" +
    "\034\001\001\000\010\010\061\012\031\014\034\001\001" +
    "\000\010\010\060\012\031\014\034\001\001\000\010\010" +
    "\057\012\031\014\034\001\001\000\002\001\001\000\010" +
    "\010\056\012\031\014\034\001\001\000\010\010\055\012" +
    "\031\014\034\001\001\000\010\010\054\012\031\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\074\012\031" +
    "\013\073\014\034\001\001\000\010\010\071\012\031\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\104\001\001\000" +
    "\010\004\014\007\105\020\106\001\001\000\006\006\141" +
    "\015\140\001\001\000\010\012\107\014\115\022\112\001" +
    "\001\000\002\001\001\000\010\010\132\012\031\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\120\011\121\012\031\014\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\123\001\001" +
    "\000\002\001\001\000\004\023\125\001\001\000\002\001" +
    "\001\000\012\010\120\011\127\012\031\014\034\001\001" +
    "\000\002\001\001\000\004\023\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\136\012\031\014\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// one symbol table for global scope
	// each function has its own symbol table
	// each block statement has its own symbol table
	
	public static symTab globalSymTab; 	// global symbol table  
	public static symTab currSymTab;   	// current symbol table
	public static boolean optFlag;		// optimization flag
	public static astNodeList code;		// list of proc ASTs    

	public static ClassFile class_file;

	// keep track of current type specification
	public static int curType;              // store current var type
	public static int returnCheckerType; 

	// output error message with current line number
	public static void msg(String s) {
		System.out.println("ERROR("+(Yylex.pos()+1)+") "+s);
	}

	public static void main(String args[]) throws Exception {

		globalSymTab = new symTab();   // init global symbol table
		currSymTab = globalSymTab;     // global symtab is current 

                // get name of input file
                String fname = null;
                String oFlag = null;

                if (args.length == 1)
                {
                        fname = args[0];
                        optFlag = false;               // optimization off
                }
                else if (args.length == 2) {
                        fname = args[1];
                        oFlag = args[0];
                        optFlag = true;                // optimization on
                }

                if ((fname == null) ||
                   !fname.endsWith(".c") ||
                   ((args.length == 2) && !oFlag.equals("-O"))) {
                        System.out.println("usage: java mycc.parser [-O] <file>.c");
                        System.exit(-1);
                }

                String cname = fname.substring(0, fname.length()-2);
                FileReader fp = new FileReader(fname);

                addPrintFunctions();
                new parser(new Yylex(fp)).parse();           // parse input
                code.print();                                // print AST

                ClassFile class_file = new ClassFile(cname); // prepare codegen
                ClassFile.generate_code(code, globalSymTab); // generate code

	}

        // add print functions in the global symbol table
        private static void addPrintFunctions()
        {
                symTabEntry param;
                symTabEntry func1;

                /* printStr(string) */
                param = new symTabEntry("DUMMY", sym.STRING_LITERAL);
                func1 = new symTabEntry("printStr", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printInt (int) */
                param = new symTabEntry("DUMMY", sym.INT);
                func1 = new symTabEntry("printInt", sym.VOID);
                func1.setFunc();
                func1.setParam(param);
                globalSymTab.addSym(func1);

                /* printLn () */
                func1 = new symTabEntry("printLn", sym.VOID);
                func1.setFunc();
                globalSymTab.addSym(func1);
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolExp ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if (e1.type() != sym.BOOL) {
			parser.msg("requires boolean");
		}
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= funcCall 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT = e1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= lhsVal 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT = e1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NOT_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isBOOL()){
				parser.msg("requires boolean");
			}
			RESULT = new expNode(sym.BOOL,sym.NOT_OP,e1);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp AND_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isBOOL()|| !e2.isBOOL()){
				parser.msg("requires boolean");
			}
			RESULT = new expNode(sym.BOOL,sym.AND_OP,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp OR_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isBOOL()|| !e2.isBOOL()){
				parser.msg("requires boolean");
			}
			RESULT = new expNode(sym.BOOL,sym.OR_OP,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp LESS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.BOOL,sym.LESS,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp GR exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.BOOL,sym.GR,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp NE_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(e1.type() != e2.type()){
				if(e1.isINT()){
					parser.msg("requires integer");
				}else{
					parser.msg("requires boolean");
					}
			}
			RESULT = new expNode(sym.BOOL,sym.NE_OP,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp EQ_OP exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(e1.type() != e2.type()){
				if(e1.isINT()){
					parser.msg("requires integer");
				}else{
					parser.msg("requires boolean");
				}
			}
			RESULT = new expNode(sym.BOOL,sym.EQ_OP,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= MINUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	
			if(!e1.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.INT,sym.MINUS,e1);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MUL exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.INT,sym.MUL,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp DIV exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.INT,sym.DIV,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MINUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.INT,sym.MINUS,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp PLUS exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			if(!e1.isINT()|| !e2.isINT()){
				parser.msg("requires integer");
			}
			RESULT = new expNode(sym.INT,sym.PLUS,e1,e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= LPAREN exp RPAREN 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = e1;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= STRING_LITERAL 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT = new expNode(e1); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= CONSTANT 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			RESULT = new expNode(e1); 
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // optArg ::= 
            {
              expNode RESULT = null;
		 
		RESULT = null;
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optArg ::= exp 
            {
              expNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = e1;
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*optArg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcCall ::= IDENTIFIER LPAREN optArg RPAREN 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		symTabEntry s = parser.globalSymTab.getSym(id);
		expNode e1 = new expNode(sym.VOID, s);
		if (id.equals("printInt")) { 
			// special case
			if ((e2 == null) || !e2.isINT()) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1, e2);
		}
		else if (id.equals("printStr")) { 
			// special case
			if ((e2 == null) || !e2.isSTR()) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1, e2);
		}
		else if (id.equals("printLn")) {
			// special case
			if (e2 != null) {
				parser.msg("parameter mismatch");
			}
			RESULT = new expNode(sym.VOID, Const.CALL, e1);
		}
		else {
			// add code to generate function call AST here
				if(s == null){
					if(parser.currSymTab.getSym(id) == null){
						
						
						s = new symTabEntry(id,sym.INT); 
						parser.msg("undeclared variable "+id);
						RESULT = new expNode(s.getType(), s);
					
					}else{
					
						s = parser.currSymTab.getSym(id);
						parser.msg("misuse of "+id);
						RESULT = new expNode(s.getType(), s);
						
					}
				}else if((s.getParam() == null && e2 != null) || (s.getParam() != null && e2 == null)){
				
					parser.msg("parameter mismatch");
					
					
				}
				if(s.isFunc()){
				
					RESULT = new expNode(s.getType(), Const.CALL, e1, e2);
				
				}
				
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*funcCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lhsVal ::= IDENTIFIER LBRACKET exp RBRACKET 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		symTabEntry s;
		s = parser.currSymTab.getSym(id);
		if (s == null) {
			s = new symTabEntry(id,sym.INT); 
			parser.msg("undeclared variable "+id);
			RESULT = new expNode(s.getType(), s);
		}
		else {
			if(s.isArray()){
				RESULT = new expNode(s.getType(), s, e1);
			}else{
				parser.msg("misuse of "+id);
				RESULT = new expNode(s.getType(), s);
			}
			if(e1.type() != sym.INT){
				parser.msg("illegal subscript");
				RESULT = new expNode(s.getType(), s);
			}
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*lhsVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lhsVal ::= IDENTIFIER 
            {
              expNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		symTabEntry s;
		s = parser.currSymTab.getSym(id);
		if (s == null) {
			s = new symTabEntry(id,sym.INT); 
			parser.msg("undeclared variable "+id);
			RESULT = new expNode(s.getType(), s);
		}
		else {
			RESULT = new expNode(s.getType(), s); 
		}
		
		if(s.isArray()){
		
			parser.msg("misuse of "+id);
		
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*lhsVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= funcCall SEMI 
            {
              astNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode f = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = new astNode();
		RESULT.genInstr(f);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= WHILE LPAREN boolExp RPAREN blockStmt 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode b1 = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNode();
		RESULT.genWhile(e1,b1);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= IF LPAREN boolExp RPAREN blockStmt ELSE blockStmt 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		astNode b1 = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode b2 = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNode();
		RESULT.genIfElse(e1,b1,b2);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= IF LPAREN boolExp RPAREN blockStmt 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode b = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNode();
		RESULT.genIf(e1, b);
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= RETURN SEMI 
            {
              astNode RESULT = null;
		
	
		if(parser.returnCheckerType != sym.VOID){
		
			parser.msg("return mismatch");
		
		}
		RESULT = new astNode();
		RESULT.genInstr(new expNode(sym.VOID,sym.RETURN));
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= RETURN exp SEMI 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(e1.type() != parser.returnCheckerType){
		
			parser.msg("return mismatch");
		
		}
		RESULT = new astNode();
		RESULT.genInstr(new expNode(e1.type(),sym.RETURN,e1));
	
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= lhsVal ASSIGN exp SEMI 
            {
              astNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e2 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if(e1.type() != e2.type()){
			if(e1.isINT()){
				parser.msg("requires integer");
			}else{
				parser.msg("requires boolean");
			}
		}
		RESULT = new astNode();
		RESULT.genInstr(new expNode(sym.VOID, sym.ASSIGN, e1, e2));
	
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmtList ::= 
            {
              astNodeList RESULT = null;
		
		RESULT = new astNodeList();
	
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmtList ::= stmtList stmt 
            {
              astNodeList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode s = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		l.add(s);
		RESULT = l;
	
              CUP$parser$result = new java_cup.runtime.Symbol(14/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // blockStmt ::= LCURL NT$0 declarationList stmtList RCURL 
            {
              astNode RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (astNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                // return to old symbol table
		RESULT = new astNode();
		RESULT.genBlk(l);
		parser.currSymTab = parser.currSymTab.getParent();
			
	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*blockStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT = null;
 
                symTab st = new symTab();
                st.setParent(parser.currSymTab);
                parser.currSymTab.addChild(st);
                parser.currSymTab = st;
	
              CUP$parser$result = new java_cup.runtime.Symbol(19/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optParam ::= 
            {
              symTabEntry RESULT = null;
		 
		RESULT = null;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optParam ::= typeSpec ident 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		RESULT = id;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*optParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcID ::= typeSpec ident LPAREN optParam RPAREN 
            {
              symTabEntry RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		symTabEntry s = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symTabEntry p = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
						if(parser.currSymTab.getSym(s.name()) == null){
						
							s.setFunc();
							parser.currSymTab.addSym(s);
							symTab st = new symTab();
                        	if(p != null){
                        		s.setParam(p);
                        		st.addSym(p);
                        	}
                        	st.setParent(parser.currSymTab);
                        	s.setSymTab(st);
                        	parser.currSymTab = st;
                        	RESULT = s;
                        	parser.returnCheckerType = s.getType();
                        	
						}else{
						
							symTabEntry fun = parser.currSymTab.getSym(s.name());
							
							if(fun.isForward()){
								
								if(fun.getType() != s.getType() || (fun.getParam() != null && p == null) || (fun.getParam() == null && p != null)){
								
									parser.msg("forward decl mismatch "+fun.name());
								
								}
								
								fun.unsetForward();
								symTab st = new symTab();
             	           		if(p != null){
                	        		fun.setParam(p);
                    	    		st.addSym(p);
                        		}
                        		st.setParent(parser.currSymTab);
                 	       		fun.setSymTab(st);
                    	    	parser.currSymTab = st;
                    	    	parser.returnCheckerType = s.getType();
                        	}else{
                        	
                        		symTab st = new symTab();
                        		parser.msg("redeclaration of "+fun.name());
                        		parser.returnCheckerType = s.getType();
                        		st.setParent(parser.currSymTab);
                        		parser.currSymTab = st;
                        	}
                        	
                        	RESULT = fun;
                        }
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*funcID*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcDef ::= funcID SEMI 
            {
              astNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			id.setForward();
			parser.currSymTab = parser.currSymTab.getParent();
		
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*funcDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcDef ::= funcID blockStmt 
            {
              astNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode f = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
				RESULT = new astNode();
				RESULT.genProc(new expNode(id.getType(), id), f);
				parser.currSymTab = parser.currSymTab.getParent();
				
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*funcDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcDefList ::= funcDef 
            {
              astNodeList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode s = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new astNodeList();
		RESULT.add(s);
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*funcDefList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcDefList ::= funcDefList funcDef 
            {
              astNodeList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astNodeList fl = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNode s = (astNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		fl.add(s);
		RESULT = fl;
	
              CUP$parser$result = new java_cup.runtime.Symbol(15/*funcDefList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ident ::= IDENTIFIER LBRACKET exp RBRACKET 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		expNode e1 = (expNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		symTabEntry s = new symTabEntry(id, parser.curType);
		s.setArray(e1.getVal());
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident ::= IDENTIFIER 
            {
              symTabEntry RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		symTabEntry s = new symTabEntry(id, parser.curType);
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identList ::= identList COMMA ident 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if(parser.currSymTab.getLocalSym(id.name()) == null){
			parser.currSymTab.addSym(id);
		}else{
		
			parser.msg("redeclaration of "+id.name());
		
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identList ::= ident 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		symTabEntry id = (symTabEntry)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if(parser.currSymTab.getLocalSym(id.name()) == null){
			parser.currSymTab.addSym(id);
		}else{
		
			parser.msg("redeclaration of "+id.name());
		
		}
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*identList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeSpec ::= VOID 
            {
              Object RESULT = null;
		
		parser.curType = sym.VOID;
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*typeSpec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typeSpec ::= INT 
            {
              Object RESULT = null;
		 
		parser.curType = sym.INT; 
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*typeSpec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= typeSpec identList SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationList ::= declarationList declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*declarationList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= declarationList funcDefList 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		astNodeList l = (astNodeList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		parser.globalSymTab.list();
		parser.code = l;
	
              CUP$parser$result = new java_cup.runtime.Symbol(1/*translation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

